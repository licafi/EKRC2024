// Generated by gencpp from file depthcam/position3d.msg
// DO NOT EDIT!


#ifndef DEPTHCAM_MESSAGE_POSITION3D_H
#define DEPTHCAM_MESSAGE_POSITION3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace depthcam
{
template <class ContainerAllocator>
struct position3d_
{
  typedef position3d_<ContainerAllocator> Type;

  position3d_()
    : x3d(0)
    , y3d(0)
    , z3d(0)  {
    }
  position3d_(const ContainerAllocator& _alloc)
    : x3d(0)
    , y3d(0)
    , z3d(0)  {
  (void)_alloc;
    }



   typedef int64_t _x3d_type;
  _x3d_type x3d;

   typedef int64_t _y3d_type;
  _y3d_type y3d;

   typedef int64_t _z3d_type;
  _z3d_type z3d;





  typedef boost::shared_ptr< ::depthcam::position3d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::depthcam::position3d_<ContainerAllocator> const> ConstPtr;

}; // struct position3d_

typedef ::depthcam::position3d_<std::allocator<void> > position3d;

typedef boost::shared_ptr< ::depthcam::position3d > position3dPtr;
typedef boost::shared_ptr< ::depthcam::position3d const> position3dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::depthcam::position3d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::depthcam::position3d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::depthcam::position3d_<ContainerAllocator1> & lhs, const ::depthcam::position3d_<ContainerAllocator2> & rhs)
{
  return lhs.x3d == rhs.x3d &&
    lhs.y3d == rhs.y3d &&
    lhs.z3d == rhs.z3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::depthcam::position3d_<ContainerAllocator1> & lhs, const ::depthcam::position3d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace depthcam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::depthcam::position3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::depthcam::position3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::depthcam::position3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::depthcam::position3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthcam::position3d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::depthcam::position3d_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::depthcam::position3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c2f0543d8404bbb5cf654877be20b1f";
  }

  static const char* value(const ::depthcam::position3d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c2f0543d8404bbbULL;
  static const uint64_t static_value2 = 0x5cf654877be20b1fULL;
};

template<class ContainerAllocator>
struct DataType< ::depthcam::position3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "depthcam/position3d";
  }

  static const char* value(const ::depthcam::position3d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::depthcam::position3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 x3d\n"
"int64 y3d\n"
"int64 z3d\n"
;
  }

  static const char* value(const ::depthcam::position3d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::depthcam::position3d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x3d);
      stream.next(m.y3d);
      stream.next(m.z3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position3d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::depthcam::position3d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::depthcam::position3d_<ContainerAllocator>& v)
  {
    s << indent << "x3d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x3d);
    s << indent << "y3d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y3d);
    s << indent << "z3d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.z3d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEPTHCAM_MESSAGE_POSITION3D_H
