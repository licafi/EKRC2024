// Generated by gencpp from file turn_on_wheeltec_robot/supersonic.msg
// DO NOT EDIT!


#ifndef TURN_ON_WHEELTEC_ROBOT_MESSAGE_SUPERSONIC_H
#define TURN_ON_WHEELTEC_ROBOT_MESSAGE_SUPERSONIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace turn_on_wheeltec_robot
{
template <class ContainerAllocator>
struct supersonic_
{
  typedef supersonic_<ContainerAllocator> Type;

  supersonic_()
    : header()
    , distanceA(0.0)
    , distanceB(0.0)
    , distanceC(0.0)
    , distanceD(0.0)
    , distanceE(0.0)
    , distanceF(0.0)
    , distanceG(0.0)
    , distanceH(0.0)  {
    }
  supersonic_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distanceA(0.0)
    , distanceB(0.0)
    , distanceC(0.0)
    , distanceD(0.0)
    , distanceE(0.0)
    , distanceF(0.0)
    , distanceG(0.0)
    , distanceH(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _distanceA_type;
  _distanceA_type distanceA;

   typedef float _distanceB_type;
  _distanceB_type distanceB;

   typedef float _distanceC_type;
  _distanceC_type distanceC;

   typedef float _distanceD_type;
  _distanceD_type distanceD;

   typedef float _distanceE_type;
  _distanceE_type distanceE;

   typedef float _distanceF_type;
  _distanceF_type distanceF;

   typedef float _distanceG_type;
  _distanceG_type distanceG;

   typedef float _distanceH_type;
  _distanceH_type distanceH;





  typedef boost::shared_ptr< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> const> ConstPtr;

}; // struct supersonic_

typedef ::turn_on_wheeltec_robot::supersonic_<std::allocator<void> > supersonic;

typedef boost::shared_ptr< ::turn_on_wheeltec_robot::supersonic > supersonicPtr;
typedef boost::shared_ptr< ::turn_on_wheeltec_robot::supersonic const> supersonicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator1> & lhs, const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.distanceA == rhs.distanceA &&
    lhs.distanceB == rhs.distanceB &&
    lhs.distanceC == rhs.distanceC &&
    lhs.distanceD == rhs.distanceD &&
    lhs.distanceE == rhs.distanceE &&
    lhs.distanceF == rhs.distanceF &&
    lhs.distanceG == rhs.distanceG &&
    lhs.distanceH == rhs.distanceH;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator1> & lhs, const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turn_on_wheeltec_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aca1ed3052718b36dedbbae37ec7b6eb";
  }

  static const char* value(const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaca1ed3052718b36ULL;
  static const uint64_t static_value2 = 0xdedbbae37ec7b6ebULL;
};

template<class ContainerAllocator>
struct DataType< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turn_on_wheeltec_robot/supersonic";
  }

  static const char* value(const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 distanceA\n"
"float32 distanceB\n"
"float32 distanceC\n"
"float32 distanceD\n"
"float32 distanceE\n"
"float32 distanceF\n"
"float32 distanceG\n"
"float32 distanceH\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distanceA);
      stream.next(m.distanceB);
      stream.next(m.distanceC);
      stream.next(m.distanceD);
      stream.next(m.distanceE);
      stream.next(m.distanceF);
      stream.next(m.distanceG);
      stream.next(m.distanceH);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct supersonic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turn_on_wheeltec_robot::supersonic_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distanceA: ";
    Printer<float>::stream(s, indent + "  ", v.distanceA);
    s << indent << "distanceB: ";
    Printer<float>::stream(s, indent + "  ", v.distanceB);
    s << indent << "distanceC: ";
    Printer<float>::stream(s, indent + "  ", v.distanceC);
    s << indent << "distanceD: ";
    Printer<float>::stream(s, indent + "  ", v.distanceD);
    s << indent << "distanceE: ";
    Printer<float>::stream(s, indent + "  ", v.distanceE);
    s << indent << "distanceF: ";
    Printer<float>::stream(s, indent + "  ", v.distanceF);
    s << indent << "distanceG: ";
    Printer<float>::stream(s, indent + "  ", v.distanceG);
    s << indent << "distanceH: ";
    Printer<float>::stream(s, indent + "  ", v.distanceH);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURN_ON_WHEELTEC_ROBOT_MESSAGE_SUPERSONIC_H
